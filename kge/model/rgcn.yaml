import: [rgnn_encoder, lookup_embedder, transe, conve, distmult]

rgcn:
  class_name: RGCN
  # type: rgnn
  entity_embedder:
    type: lookup_embedder
    initialize: xavier_normal_ # TODO: nachschauen!
    dim: 500
    regularize: ''
    +++: +++
  relation_embedder:
    type: lookup_embedder
    initialize: xavier_normal_
    regularize: ''
    dim: 500
    +++: +++
  encoder:
    type: rgnn_encoder
    # CompGCN specific RGNN parameters:
    layer_type: torch_rgcn # rgcn supports both torch_rgcn and message_passing (slower)

    torch_rgcn_args:
      vertical_stacking: False
    message_passing_args:
      edge_norm: True
      emb_propagation_dropout: 0.0  
      propagation: per_relation 
      composition: neighbor  # no composition: add up neighbors
      message_weight: False
      attention: False

    activation: relu
    num_layers: 1
    # 1_out_dim: 500

    edge_dropout: 0.5
    self_edge_dropout: 0.2
    
    emb_entity_dropout: 0.0  # used on the entity output of the rgnn layer
    
    bias: True 
    weight_init: xavier_uniform_
    weight_decomposition: block # other option: basis
    num_blocks_or_bases: 100
    rel_transformation: self
    
    +++: +++

  decoder: # specify which scorer to use as a decoder in the RGNN, one of the
           # scoring functions. The original CompGCN model supports TransE,
           # and Distmult but in principle any other function can be imported
           # or passed
    model: distmult
    type: distmult
    scorer: DistMultScorer 
    